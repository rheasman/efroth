#-------------------------------------------------------------------------
#Parser.py -- ATG file parser
#Compiler Generator Coco/R,
#Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
#extended by M. Loeberbauer & A. Woess, Univ. of Linz
#ported from Java to Python by Ronald Longo
#
#This program is free software; you can redistribute it and/or modify it
#under the terms of the GNU General Public License as published by the
#Free Software Foundation; either version 2, or (at your option) any
#later version.
#
#This program is distributed in the hope that it will be useful, but
#WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#for more details.
#
#You should have received a copy of the GNU General Public License along
#with this program; if not, write to the Free Software Foundation, Inc.,
#59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#As an exception, it is allowed to write an extension of Coco/R that is
#used as a plugin in non-free software.
#
#If not otherwise stated, any source code generated by Coco/R (other than
#Coco/R itself) does not fall under the GNU General Public License.
#-------------------------------------------------------------------------*/

import array, collections
import opcodes, ioconsts
import struct, sys, json


import sys

from Scanner import Token
from Scanner import Scanner
from Scanner import Position

class ErrorRec( object ):
   def __init__( self, l, c, s ):
      self.line   = l
      self.col    = c
      self.num    = 0
      self.str    = s


class Errors( object ):
   errMsgFormat = "file %(file)s : (%(line)d, %(col)d) %(text)s\n"
   eof          = False
   count        = 0         # number of errors detected
   fileName     = ''
   listName     = ''
   mergeErrors  = False
   mergedList   = None      # PrintWriter
   errors       = [ ]
   minErrDist   = 2
   errDist      = minErrDist
      # A function with prototype: f( errorNum=None ) where errorNum is a
      # predefined error number.  f returns a tuple, ( line, column, message )
      # such that line and column refer to the location in the
      # source file most recently parsed.  message is the error
      # message corresponging to errorNum.

   @staticmethod
   def Init( fn, dir, merge, getParsingPos, errorMessages ):
      Errors.theErrors = [ ]
      Errors.getParsingPos = getParsingPos
      Errors.errorMessages = errorMessages
      Errors.fileName = fn
      listName = dir + 'listing.txt'
      Errors.listName = listName
      Errors.mergeErrors = merge
      if Errors.mergeErrors:
         try:
            Errors.mergedList = open( listName, 'w' )
         except IOError:
            raise RuntimeError( '-- Compiler Error: could not open ' + listName )

   @staticmethod
   def storeError( line, col, s ):
      if Errors.mergeErrors:
         Errors.errors.append( ErrorRec( line, col, s ) )
      else:
         Errors.printMsg( Errors.fileName, line, col, s )

   @staticmethod
   def SynErr( errNum, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      msg = Errors.errorMessages[ errNum ]
      Errors.storeError( line, col, msg )
      Errors.count += 1

   @staticmethod
   def SemErr( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )
      Errors.count += 1

   @staticmethod
   def Warn( errMsg, errPos=None ):
      line,col = errPos if errPos else Errors.getParsingPos( )
      Errors.storeError( line, col, errMsg )

   @staticmethod
   def Exception( errMsg ):
      print(errMsg)
      sys.exit( 1 )

   @staticmethod
   def printMsg( fileName, line, column, msg ):
      vals = { 'file':fileName, 'line':line, 'col':column, 'text':msg }
      sys.stdout.write( Errors.errMsgFormat % vals )

   @staticmethod
   def display( s, e ):
      Errors.mergedList.write('**** ')
      for c in range( 1, e.col ):
         if s[c-1] == '\t':
            Errors.mergedList.write( '\t' )
         else:
            Errors.mergedList.write( ' ' )
      Errors.mergedList.write( '^ ' + e.str + '\n')

   @staticmethod
   def Summarize( sourceBuffer ):
      if Errors.mergeErrors and Errors.count:
        errs = list(Errors.errors)
        for (srcLineNum, srcLineStr) in enumerate(iter(sourceBuffer), start=1):
          Errors.mergedList.write( '%4d %s\n' % (srcLineNum, srcLineStr.rstrip()) )
          while errs and (errs[0].line == srcLineNum):
            err = errs.pop(0)
            Errors.display( srcLineStr, err )

        if errs:
          # Still some errors left.
          for i in errs:
            Errors.display( " "*i.col, i)

        

      if Errors.count == 1:
        sys.stdout.write( '%d error detected.\n' % Errors.count )
      if Errors.count != 1:
        sys.stdout.write( '%d errors detected.\n' % Errors.count )

      if Errors.mergeErrors and Errors.count:
        sys.stdout.write( f"see {Errors.listName} for a listing showing the errors.\n")

class Parser( object ):
   _EOF = 0
   _identifier = 1
   _number = 2
   _string = 3
   _float = 4
   maxT = 25

   T          = True
   x          = False
   minErrDist = 2

   Opcodes = opcodes.OpCodes()
   IO = ioconsts.IOConsts()
   WordCnt = 0
   Words = collections.OrderedDict()
   WordList = []
   Labels = {}
   Addr = 0
   Fixups = collections.deque()
   ROM = array.array("B")

   # Struct to map ROM address ranges to symbols
   DebugInfo = {}
   AddrToSource = {}
   T_OPCODE = 0
   T_VAL = 1  

   def emit(self, op, otype, comment=''):
      print("%5d" % self.Addr, "%6s" % op, "  ", comment)
      if op in self.Opcodes.OPCODESET:
        self.ROM.append(self.Opcodes.OPCODENUM[op])
      else:
        self.ROM.append(op)
      self.AddrToSource[int(self.Addr)] = (otype, self.token.pos, self.token.line, self.token.col, self.token.val, self.ROM[-1])
      self.Addr += 1

   def addWord(self, wordstr):
      if wordstr not in self.Words:
        self.Words[wordstr] = (self.WordCnt, self.Addr)
        self.WordList.append(wordstr)
        print(": %s" % wordstr)
        self.WordCnt += 1
        return wordstr
      else:
        self.SemErr(f"'{wordstr}' already defined: ")

   def addLabel(self, label):
     labelname = self.WordList[-1] + '::' + label
     if labelname in self.Labels:
       self.SemErr("Label already defined: " + labelname)
     else:
       self.Labels[labelname] = self.Addr
       print("{%s}" % labelname)

   def emitWord(self, wordstr, comment=''):
      if wordstr in self.Opcodes.OPCODESET:
        # It's an opcode
        self.emit(wordstr, self.T_OPCODE, comment=comment)
        return
      
      if wordstr in self.IO.IODICT:
        # It's a defined IO constant
        self.emitVal(self.IO.IOCONSTVAL[wordstr], comment="// %s: %d" % (wordstr, self.IO.IOCONSTVAL[wordstr]))
        return

      if wordstr in self.Words:
        waddr = self.Words[wordstr][1]
        self.emitVal(waddr, comment="// %5d %s" % (waddr, wordstr))
        self.emit("CALL", self.T_OPCODE)
        return

      # Maybe it's a label
      labelname = self.WordList[-1] + '::' + wordstr
      if labelname in self.Labels:
        laddr = self.Labels[labelname]
        self.emitVal(laddr, comment = "// %s" % labelname)
        return

      SemErr(f"Didn't know what to do with: '{wordstr}'. It's not an opcode, word, known constant, or label." )  

   def floatToBytes(self, floatval):
     bitpattern = struct.pack("<f", float(floatval))
     return struct.unpack("BBBB", bitpattern)

   def emitFloat(self, floatval, comment=''):
      floatval = float(floatval)
      bytes = self.floatToBytes(floatval)
      self.emit("IMMF", self.T_OPCODE);
      self.emit(bytes[0], self.T_VAL, comment = "// %02X (float: %8f)" % (bytes[0], floatval))
      self.emit(bytes[1], self.T_VAL, comment = "// %02X" % (bytes[1]))
      self.emit(bytes[2], self.T_VAL, comment = "// %02X" % (bytes[2]))
      self.emit(bytes[3], self.T_VAL, comment = "// %02X" % (bytes[3]))

   def emitAddr(self, addr, addfixup=False, comment=''):
      if (addr >=0) and (addr < 65536):
        # 16 bit unsigned immediate
        self.emit('IMMU', self.T_OPCODE)
        if addfixup:
          self.Fixups.append(self.Addr)
        self.emit(addr & 0xFF, self.T_VAL, comment=comment)
        self.emit((addr >> 8) & 0xFF, self.T_VAL, comment=comment)
        return

   def fixupAddr(self, addr):
      d = list(self.AddrToSource[addr])
      d[-1] = self.ROM[addr]
      self.AddrToSource[addr] = tuple(d)

   def doFixup(self, tofix, addr):
      print(f"Fixup {tofix} to {addr}")

      self.ROM[tofix] = addr & 0xFF
      self.fixupAddr(tofix) 

      self.ROM[tofix+1] = (addr >> 8) & 0xFF
      self.fixupAddr(tofix) 


   def emitVal(self, val, comment=''):
      val = float(val)
      intval = int(val)
      fracval = val % 1

      # It's a float
      if (fracval > 0):
        self.emitFloat(val)
        return

      if (intval >= 0) and (intval < 128):
        # 7-bit immediate
        # comment = "// %s %s" % (intval & 0x7F, comment)
        self.emit(0x80 | intval, self.T_VAL, comment=comment)
        return

      if (intval >= -128) and (intval < 128):
        # 8-bit immediate
        self.emit('IMMS', self.T_OPCODE)
        self.emit(intval, self.T_VAL, comment=comment)
        return

      offset = intval - self.Addr
      if (offset >= -128) and (offset < 128):
        # PC-relative number
        self.emit('PCIMM')
        self.emit(offset, self.T_VAL, comment=comment)
        return

      if (intval >=0) and (intval < 65536):
        # 16 bit unsigned immediate
        self.emit('IMMU', self.T_OPCODE)
        self.emit(intval & 0xFF, self.T_VAL, comment=comment)
        self.emit((intval >> 8) & 0xFF, self.T_VAL, comment=comment)
        return

      # Fine, no efficient way to encode the value
      self.emitFloat(val, comment=comment)

   def checkWords(self):
     if "RunShot" not in self.Words:
       self.SemErr( "The word 'RunShot' must be defined." )
     if "Idle" not in self.Words:
       self.SemErr( "The word 'Idle' must be defined." )
     if "Halted" not in self.Words:
       self.SemErr( "The word 'Halted' must be defined." )

   def writeResults(self, outputfile):
      print(self.AddrToSource)
      #print(self.Words)
      debuginfo = {
        'AddrToSource' : self.AddrToSource,
        'Words' : self.Words
      }

      #print("Object code:")
      #bytes = [format(x, "02X") for x in self.ROM]
      #print("  ", ",".join(bytes))
      #print()
      addr_shot = self.Words['RunShot'][1]
      addr_idle = self.Words['Idle'][1]
      addr_halted = self.Words['Halted'][1]
      with open(outputfile+".bin", "wb") as f:
        data = struct.pack(f"<4sHHHHHHH{len(self.ROM)}s", b"EFVM", 
          0,             # Version
          self.MaxVol,
          self.MaxSec,
          0x12,          # Start of ROM
          addr_shot,
          addr_idle,
          addr_halted,
          self.ROM.tobytes()
        )
        f.write(data)
      
      with open(outputfile+".debug", 'w') as outfile:
        json.dump(debuginfo, outfile, indent=2)
      
   def startFor(self):
      self.emitAddr(0, addfixup=True)
      self.emitWord("FOR")

   def endFor(self, addr):
      self.emitWord("ENDFOR", comment=f"// FOR at {addr}.")
      self.doFixup(self.Fixups.pop(), self.Addr)


   def __init__( self ):
      self.scanner     = None
      self.token       = None           # last recognized token
      self.la          = None           # lookahead token
      self.genScanner  = False
      self.tokenString = ''             # used in declarations of literal tokens
      self.noString    = '-none-'       # used in declarations of literal tokens
      self.errDist     = Parser.minErrDist

   def getParsingPos( self ):
      return self.la.line, self.la.col

   def SynErr( self, errNum ):
      if self.errDist >= Parser.minErrDist:
         Errors.SynErr( errNum )

      self.errDist = 0

   def SemErr( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.SemErr( msg )

      self.errDist = 0

   def Warning( self, msg ):
      if self.errDist >= Parser.minErrDist:
         Errors.Warn( msg )

      self.errDist = 0

   def Successful( self ):
      return Errors.count == 0;

   def LexString( self ):
      return self.token.val

   def LookAheadString( self ):
      return self.la.val

   def Get( self ):
      while True:
         self.token = self.la
         self.la = self.scanner.Scan( )
         if self.la.kind <= Parser.maxT:
            self.errDist += 1
            break
         
         self.la = self.token

   def Expect( self, n ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )

   def StartOf( self, s ):
      return self.set[s][self.la.kind]

   def ExpectWeak( self, n, follow ):
      if self.la.kind == n:
         self.Get( )
      else:
         self.SynErr( n )
         while not self.StartOf(follow):
            self.Get( )

   def WeakSeparator( self, n, syFol, repFol ):
      s = [ False for i in range( Parser.maxT+1 ) ]
      if self.la.kind == n:
         self.Get( )
         return True
      elif self.StartOf(repFol):
         return False
      else:
         for i in range( Parser.maxT ):
            s[i] = self.set[syFol][i] or self.set[repFol][i] or self.set[0][i]
         self.SynErr( n )
         while not s[self.la.kind]:
            self.Get( )
         return self.StartOf( syFol )

   def EFroth( self ):
      self.Expect(5)
      self.Expect(3)
      self.Expect(6)
      self.Expect(2)
      self.MaxVol = int(self.token.val) 
      self.Expect(6)
      self.Expect(2)
      self.MaxSec = int(self.token.val) 
      self.Expect(7)
      self.Program()
      self.checkWords() 

   def Program( self ):
      while self.la.kind == 8 or self.la.kind == 10:
         self.Word()


   def Word( self ):
      if self.la.kind == 8:
         while not (self.la.kind == 0 or self.la.kind == 8):
            self.SynErr(26)
            self.Get()
         self.AnnotatedWord()
      elif self.la.kind == 10:
         self.SimpleWord()
      else:
         self.SynErr(27)

   def AnnotatedWord( self ):
      self.Expect(8)
      while self.la.kind == 1:
         self.Get( )

      self.ExpectWeak(9, 1)
      while self.la.kind == 1:
         self.Get( )

      self.Expect(7)
      self.RestOfWord()

   def SimpleWord( self ):
      self.Expect(10)
      self.RestOfWord()

   def RestOfWord( self ):
      name = self.WordDef()
      while self.StartOf(2):
         self.CompoundStatement()

      self.EndOfWord()

   def WordDef( self ):
      self.Expect(1)
      name = self.addWord(self.token.val)        
      return name

   def CompoundStatement( self ):
      if self.la.kind == 11:
         self.If()
      elif self.la.kind == 14:
         self.For()
      elif self.la.kind == 16:
         self.Repeat()
      elif self.la.kind == 18:
         self.While()
      elif self.StartOf(3):
         self.Statement()
      else:
         self.SynErr(28)

   def EndOfWord( self ):
      self.Expect(20)
      self.emit(";", self.T_OPCODE) 

   def If( self ):
      self.Expect(11)
      self.emitAddr(0, addfixup=True)             
      self.emitWord("BZ")                         
      while self.StartOf(2):
         self.CompoundStatement()

      while self.la.kind == 12:
         tofix = self.Fixups.pop()                   
         self.emitAddr(0, addfixup=True)             
         self.emitWord("BRA")                        
         self.Get( )
         self.doFixup(tofix, self.Addr);             
         while self.StartOf(2):
            self.CompoundStatement()


      self.Expect(13)
      self.doFixup(self.Fixups.pop(), self.Addr)  

   def For( self ):
      self.Expect(14)
      self.startFor(); addr = self.Addr-1         
      while self.StartOf(2):
         self.CompoundStatement()

      self.Expect(15)
      self.endFor(addr)                           

   def Repeat( self ):
      self.Expect(16)
      while self.StartOf(2):
         self.CompoundStatement()

      self.Expect(17)

   def While( self ):
      self.Expect(18)
      while self.StartOf(2):
         self.CompoundStatement()

      self.Expect(19)

   def Statement( self ):
      if self.la.kind == 1:
         self.WordName()
      elif self.StartOf(4):
         self.Number()
      elif self.la.kind == 21:
         self.Label()
      else:
         self.SynErr(29)

   def WordName( self ):
      self.Expect(1)
      self.emitWord(self.token.val)              

   def Number( self ):
      if self.la.kind == 23:
         self.Get( )
         self.IntOrFloat()
      elif self.la.kind == 24:
         self.Get( )
         self.IntOrFloat()
      elif self.la.kind == 2 or self.la.kind == 4:
         self.IntOrFloat()
      else:
         self.SynErr(30)
      self.emitVal(self.token.val, comment="// %s" % self.token.val) 

   def Label( self ):
      self.Expect(21)
      self.Expect(1)
      self.addLabel(self.token.val)              
      self.Expect(22)

   def IntOrFloat( self ):
      if self.la.kind == 2:
         self.Get( )
      elif self.la.kind == 4:
         self.Get( )
      else:
         self.SynErr(31)



   def Parse( self, scanner ):
      self.scanner = scanner
      self.la = Token( )
      self.la.val = ''
      self.Get( )
      self.EFroth()
      self.Expect(0)


   set = [
      [T,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x],
      [T,T,x,x, x,x,x,T, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x],
      [x,T,T,x, T,x,x,x, x,x,x,T, x,x,T,x, T,x,T,x, x,T,x,T, T,x,x],
      [x,T,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, T,x,x],
      [x,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, T,x,x]

      ]

   errorMessages = {
      
      0 : "EOF expected",
      1 : "identifier expected",
      2 : "number expected",
      3 : "string expected",
      4 : "float expected",
      5 : "\"Program(\" expected",
      6 : "\",\" expected",
      7 : "\")\" expected",
      8 : "\":(\" expected",
      9 : "\"--\" expected",
      10 : "\":\" expected",
      11 : "\"IF\" expected",
      12 : "\"ELSE\" expected",
      13 : "\"ENDIF\" expected",
      14 : "\"FOR\" expected",
      15 : "\"ENDFOR\" expected",
      16 : "\"REPEAT\" expected",
      17 : "\"ENDREPEAT\" expected",
      18 : "\"WHILE\" expected",
      19 : "\"ENDWHILE\" expected",
      20 : "\";\" expected",
      21 : "\"{\" expected",
      22 : "\"}\" expected",
      23 : "\"+\" expected",
      24 : "\"-\" expected",
      25 : "??? expected",
      26 : "this symbol not expected in Word",
      27 : "invalid Word",
      28 : "invalid CompoundStatement",
      29 : "invalid Statement",
      30 : "invalid Number",
      31 : "invalid IntOrFloat",
      }


