Program("Shot Sequencer for legacy profiles", 500, 120)
Global CurrentFrame

//  struct PACKEDATTR T_ShotFrame {
//    U8P0   Flag;       // See T_E_FrameFlags
//    U8P4   SetVal;     // SetVal is a 4.4 fixed point number, setting either pressure or flow rate, as per mode
//    U8P1   Temp;       // Temperature in 0.5 C steps from 0 - 127.5
//    F8_1_7 FrameLen;   // FrameLen is the length of this frame in seconds. It's a 1/7 bit floating point number as described in the F8_1_7 a struct
//    U8P4   TriggerVal; // Trigger value. Could be a flow or pressure.
//    U10P0  MaxVol;     // Exit current frame if the total shot volume/weight exceeds this value. 0 means ignore
//  };

:( U8P4_x -- x ) FromU8P4
  16 /
;

// I'm starting words that fetch fields from structs with ".@"
// This is the "." from C, and the "@" from FORTH
// Similarly, to store into fields, I'll use ".!"

:( &ShotFrame -- ShotFrame.Flag ) .@Flag
  @B <Flag>  // Get flag byte and name it
;

:( &ShotFrame -- SetVal ) .@SetVal
  1 + @B              // SetVal is one byte into the struct
  FromU8P4 <SetVal>   // Convert to correct units and rename
;

:( &ShotFrame -- Temp ) .@Temp
  2 + @B
  2 / <Temp>
;

// Convert from F8_1_8 to float
:( F8_1_7 -- x ) FromF8_1_7
  DUP         // Fx Fx
  128 AND     // Fx (higbit set?)
  IF          // Fx
    127 AND   // Fx & 0x7F
  ELSE
    10 /      // 0 high bit means range is 0 - 12.7 in steps of 0.1
  ENDIF
;

:( &ShotFrame -- FrameLen ) .@FrameLen
  3 + @B
  FromF8_1_7 <FrameLen>
;

:( &ShotFrame -- TriggerVal ) .@TriggerVal
  4 + @B
  FromU8P4 <TriggerVal>
;

:( @ShotFrame -- MaxVol ) .@MaxVol
  DUP 6 + @B    // get high byte
  0x3 AND       // keep bottom 2 bits
  256 *         // shift left 8
  SWAP 5 + @B   // get low byte
  OR            // OR them together
  <MaxVol>
;

/*
float interpolate(float width, float position, float y1, float y2) {
  if (width < 0.001f) {
    return y2;
  }
  if (position >= width) {
      return y2;
  }
  float xpos = position/width;
  return (y2*xpos + (1.0f-xpos)*y1);
}
*/

:( y1 y2 pos width -- y ) Interpolate
  // If values are in range, return y2*xpos + (1.0f-xpos)*y1

  // Return y2 if width < 0.001 or pos >= width
  DUP          // -- y1 y2 pos width width
  0.001 TLT    // -- y1 y2 pos width (width < 0.001)
  TOR          // -- y1 y2 pos width {(width < 0.001)} ie. Save result on return stack

  OVER OVER    // -- y1 y2 pos width pos width
  TGE          // -- y1 y2 pos width (pos >= width)
  FROMR OR     // -- y1 y2 pos width ((pos >= width) or (width < 0.001))
  IF
    // Pos or width are out of range, so return y2
    DROP DROP  // -- y1 y2
    SWAP DROP  // -- y2
    EXIT
  ENDIF

  // This is the actual interpolation
               // -- y1 y2 pos width
  / <xpos>     // -- y1 y2 xpos
  SWAP         // -- y1 xpos y2
  OVER         // -- y1 xpos y2 xpos
  *            // -- y1 xpos (y2*xpos)
  NROT         // -- (y2*xpos) y1 xpos  // NROT is useful to move a result out of the way
  1 SWAP -     // -- (y2*xpos) y1 1-xpos
  *            // -- (y2*xpos) ((1-xpos)*y1)
  +            // -- (y2*xpos + (1-xpos)*y1)
;

/*
:( y1 y2 pos width -- y ) Interpolate2
  pos 0.001 TLT <r1>  // pos -- pos (pos < 0.001?) <r1>
  pos width TGE <r2>  // pos width -- pos width (pos >= width) <r2>
  OR                  // r1 r2 -- r1 | r2
  IF
    KEEP(y2)            // Get rid of everything not y2
    EXIT
  ENDIF

  pos width / <xpos>
  DISCARD(pos width)
  y2 xpos * 1 xpos - y1 * + <result>
  KEEP(result)
;

*/
// Define the actual shot
: RunShot
  1  <y1>
  11 <y2>
  3.5  <pos>
  10 <width>
  Interpolate
  DROP

  1  <y1>
  11 <y2>
  11.5  <pos>
  10 <width>
  Interpolate
  DROP


  STOP            // Tell DE1 to stop
;

: Idle
;

: Halt
;