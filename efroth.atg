from frothcompiler import FrothCompiler

COMPILER EFroth
   def init(self):
    self.C = FrothCompiler(self)

   def writeResults(self, filetoparse, filebase):
    return self.C.writeResults(filetoparse, filebase)

CHARACTERS
  eol      = CHR(10) .
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_[].@!&" .
  digit    = "0123456789" .
  hexdigit = "0123456789ABCDEF" .
  noquote1 = ANY - "'" - eol .
  noquote2 = ANY - '"' - eol .

TOKENS
  identifier = letter {letter | digit} .
  number     = digit { digit } .
  hexnumber  = "0x" hexdigit { hexdigit } .
  negnumber  = "-" digit { digit } .
  string     =  "'" noquote1 {noquote1} "'" | '"' noquote2 {noquote2} '"' .
  float      = digit {digit} '.' digit {digit} .
  negfloat   = "-" digit {digit} '.' digit {digit} .

COMMENTS FROM "//" TO eol
COMMENTS FROM "/*" TO "*/"

IGNORE  CHR(9) .. CHR(13)

PRODUCTIONS
  EFroth               =                          (. self.init() .)
                         "Program("               
                          string 
                          "," 
                          number                  (. self.C.MaxVol = int(self.token.val) .)
                          "," 
                          number                  (. self.C.MaxSec = int(self.token.val) .)
                          ")" 
                          Program                 (. self.C.checkWords() .)
                          .                       
  Program              =  { Global }
                          { Word }
                          .

  Global               = "Global"
                          identifier              (. self.C.addGlobal(self.token.val) .)
                          .
  Word                 = SYNC
                          AnnotatedWord
                          |
                          SimpleWord
                          .
  AnnotatedWord        = ":("                     (. self.C.clearStackIds()                      .)
                          { identifier            (. self.C.addStackBeforeId(self.token.val)     .)
                          } 
                          WEAK "--" 
                          { identifier            (. self.C.addStackAfterId(self.token.val) .)
                          } 
                          ")"                     
                          RestOfWord 
                          .
  SimpleWord           = ":"                      (. self.C.clearStackIds()                      .)
                          RestOfWord
                          .
  RestOfWord           = WordDef<out name>        (. print(f"// {name} : {self.C.StackIdList} -- {self.C.StackIdAfterList}") .)
                          { CompoundStatement }
                          EndOfWord
                          .

  CompoundStatement    = If | For | Repeat | While | Statement .               
  If                   = "IF"                    
                                                 (. self.C.emitAddr(0, addfixup=True)             .)
                                                 (. self.C.emitWord("BZ")                         .)
                                                 (. stackbeforeif = self.C.StackUse               .)                                                                                                  
                          { CompoundStatement }
                          { 
                                                 (. tofix = self.C.Fixups.pop()                   .)
                                                 (. self.C.emitAddr(0, addfixup=True)             .)
                                                 (. self.C.emitWord("BRA")                        .)
                                                 (. stackbeforeelse = self.C.StackUse             .)
                          "ELSE"               
                                                 (. self.C.doFixup(tofix, self.C.Addr);             .) 
                                                 (. self.C.StackUse = stackbeforeif               .)
                          { CompoundStatement }  
                                                 (. self.C.checkPathsEqual(stackbeforeelse, self.C.StackUse) .)
                          }
                          "ENDIF"                (. self.C.doFixup(self.C.Fixups.pop(), self.C.Addr)  .)
                                                 (. self.C.StackUse = stackbeforeif               .)
                          .
  For                  = "FOR"                   (. self.C.startFor(); addr = self.C.Addr-1         .)
                          { CompoundStatement }
                          "ENDFOR"               (. self.C.endFor(addr)                           .)
                          .
  Repeat               = "REPEAT"
                          { CompoundStatement }
                          "ENDREPEAT"
                          .
  While                = "WHILE"
                          { CompoundStatement }
                          "ENDWHILE"
                          .
  Statement            = WordName
                        | Number 
                        | Label        
                        | MathOp
                        | Tag
                        | StackCopy
                        | StackDiscard
                        | StackKeep
                        .
  StackCopy            = "COPY(" {
                         number | identifier      (. self.C.copyStackId(self.token.val)           .)
                         }
                         ")"
                         .

  StackKeep            = "KEEP(" {
                         identifier               
                         }
                         ")"
                         .

  StackDiscard           = "DISCARD("
                         {
                         number | identifier      (. self.C.discardStackId(self.token.val)        .)
                         }
                         ")"
                         .

  MathOp               = ( "-" | "+" | "*" | "/" )(. self.C.emitWord(self.token.val)              .)
                        .
  WordName             = identifier               (. self.C.emitWord(self.token.val)              .)
                        .
  WordDef<out name>    = identifier               (. name = self.C.addWord(self.token.val)        .)
                         .
  EndOfWord            =                          (. self.C.emit(";", self.C.T_OPCODE, 1)           .)
                         ";"
                        .
  Label                = "{"
                          identifier              (. self.C.addLabel(self.token.val)              .)
                          "}"
                          .
  Tag                  = "<"
                          identifier              (. self.C.addTag(self.token.val)                .)
                          ">"
                          .   
  Number               = IntOrFloat<out val>      (. self.C.emitVal(val, comment="// %s" % self.token.val) .)
                         .

  IntOrFloat<out val>  = ( number                 (. val = int(self.token.val, 10)              .)
                         | hexnumber              (. val = int(self.token.val, 16)              .)
                         | float                  (. val = float(self.token.val)                .)
                         | negnumber              (. val = int(self.token.val, 10)              .)
                         | negfloat               (. val = float(self.token.val)                .)
                         )
                         .


END EFroth.